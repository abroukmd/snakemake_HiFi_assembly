#############################################
# Snakefile — HiFi Assembly (Refactored)
#############################################

import pandas as pd
from pathlib import Path
import os
import sys

# ──────────────────────────────────────────────────
# Validate and load config
# ──────────────────────────────────────────────────

sample_sheet = config.get("sample_sheet", "").strip()
if not sample_sheet:
    raise ValueError("Missing 'sample_sheet' in config file.")

project_dir = config.get("project_dir", "").strip().rstrip("/")
if not project_dir:
    raise ValueError("Missing 'project_dir' in config file.")

project_dir = os.path.abspath(project_dir)
os.makedirs(project_dir, exist_ok=True)

def outpath(*parts):
    """Helper to construct absolute paths under project_dir."""
    return os.path.join(project_dir, *parts)

# ──────────────────────────────────────────────────
# Load sample metadata and validate presence of all listed files
# ──────────────────────────────────────────────────

samples_df = pd.read_csv(sample_sheet, sep="\t")
required_columns = {"sample", "HiFi", "Ref", "fq1", "fq2"}
missing = required_columns - set(samples_df.columns)
if missing:
    raise ValueError(f"Missing columns in sample sheet: {missing}")

samples = samples_df["sample"].tolist()
sample_paths = dict(zip(samples_df["sample"], samples_df["HiFi"]))
sample_refs = dict(zip(samples_df["sample"], samples_df["Ref"]))
sample_fq1 = dict(zip(samples_df["sample"], samples_df["fq1"]))
sample_fq2 = dict(zip(samples_df["sample"], samples_df["fq2"]))

# Export globally
globals().update({
    "sample_fq1": sample_fq1,
    "sample_fq2": sample_fq2
})

# Check that all required input files exist
for s in samples:
    for path in [sample_paths[s], sample_fq1[s], sample_fq2[s]]:
        if not Path(path).is_file():
            print(f"[ERROR] Missing input file for sample {s}: {path}")
            dir_path = Path(path).parent
            if dir_path.exists():
                print(f"[DEBUG] Contents of {dir_path}:")
                for p in sorted(dir_path.glob('*')):
                    print(f"  - {p.name}")
            raise FileNotFoundError(f"Input file not found for sample {s}: {path}")

def reference_from_tsv(sample):
    if sample not in sample_refs:
        raise ValueError(f"Reference genome not found for sample {sample} in sample sheet")
    return sample_refs[sample]

SAMPLES = samples
PLOIDIES = [1, 2, 3, 4]

# ──────────────────────────────────────────────────
# Include modular rule files
# ──────────────────────────────────────────────────

include: "rules/qc.smk"
#include: "rules/smudgeplot.smk"
include: "rules/assembly.smk"
include: "rules/oatk.smk"
include: "rules/filtering.smk"
include: "rules/annotation.smk"
include: "rules/postqc.smk"
include: "rules/chromeister.smk"
include: "rules/merqury.smk"
# include: "rules/multiqc.smk"

# ──────────────────────────────────────────────────
# Final target rule (now using project_dir)
# ──────────────────────────────────────────────────

rule all:
    input:
        # QC outputs
        expand(outpath("Assemblies/{sample}/QC/nanoplot"), sample=SAMPLES),

        # OATK output
        expand(outpath("Assemblies/{sample}/OATK/{sample}.mito.ctg.fasta"), sample=SAMPLES),

        # Assemblies
        expand(outpath("Assemblies/{sample}/HIFIASM/hifiasm.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/LJA/lja.done"), sample=SAMPLES),

        # Telosearch
        expand(outpath("Assemblies/{sample}/TELOSEARCH/{sample}.hifireads.fasta"), sample=SAMPLES),

        # Filtered assemblies
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-hifiasm.fasta"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-hifiasm.fasta.paf"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-hifiasm.fasta.list"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-lja.fasta"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-lja.fasta.paf"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/FILTERED/{sample}-HIFI-lja.fasta.list"), sample=SAMPLES),

        # rRNA annotation
        expand(outpath("Assemblies/{sample}/FILTERED/barrnap.done"), sample=SAMPLES),

        # Post QC
        expand(outpath("Assemblies/{sample}/QC/BUSCO-hifiasm/busco_hifiasm.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/QC/BUSCO-lja/busco_lja.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/QC/QUAST/quast.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/QC/merqury/merqury.done"), sample=SAMPLES),

        # Chromeister
        expand(outpath("Assemblies/{sample}/CHROMEISTER/.hifiasm.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/CHROMEISTER/.lja.done"), sample=SAMPLES),
        expand(outpath("Assemblies/{sample}/CHROMEISTER_COMPARE/.compare.done"), sample=SAMPLES),

        # multiQC (optional)
        # outpath("Assemblies/multiqc/multiqc.done")
